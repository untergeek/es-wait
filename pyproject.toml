[build-system]
requires = ['hatchling']
build-backend = 'hatchling.build'

[project]
name = 'es-wait'
authors = [{ name='Aaron Mildenstein', email='untergeek@elastic.co' }]
dynamic = ['version']
description = 'Helping you wait for certain Elasticsearch tasks and API calls to finish'
license = { text='Apache-2.0' }
readme = 'README.md'
requires-python = '>=3.8'
classifiers = [
  'Intended Audience :: Developers',
  'Intended Audience :: System Administrators',
  'License :: OSI Approved :: Apache Software License',
  'Operating System :: OS Independent',
  'Programming Language :: Python',
  'Programming Language :: Python :: 3.8',
  'Programming Language :: Python :: 3.9',
  'Programming Language :: Python :: 3.10',
  'Programming Language :: Python :: 3.11',
  'Programming Language :: Python :: 3.12',
]
keywords = [
    'elasticsearch',
    'tools',
    'wait',
]
dependencies = [
    'elasticsearch8>=8.13.0',
    'dotmap==1.3.30',
]

[project.optional-dependencies]
test = [
    'mock',
    'requests',
    'pytest >=7.2.1',
    'pytest-cov',
    'es_client==8.13.4',
]
doc = ['sphinx', 'sphinx_rtd_theme']

[tool.hatch.module]
name = 'es-wait'

[project.urls]
Documentation = 'https://github.com/untergeek/es-wait#readme'
Issues = 'https://github.com/untergeek/es-wait/issues'
Source = 'https://github.com/untergeek/es-wait'

[tool.hatch.version]
path = 'src/es_wait/__init__.py'

[tool.hatch.envs.default]
dependencies = [
  'coverage[toml]>=6.5',
  'pytest',
]

[tool.hatch.envs.default.scripts]
test = 'pytest {args:tests}'
test-cov = 'coverage run -m pytest {args:tests}'
cov-report = [
  '- coverage combine',
  'coverage report',
]
cov = [
  'test-cov',
  'cov-report',
]

# Test environment
[[tool.hatch.envs.test.matrix]]
python = ['3.8', '3.9', '3.10', '3.11', '3.12']

[tool.hatch.envs.test.scripts]
test = 'pytest'
test-cov = 'pytest --cov=es_wait'
cov-report = 'pytest --cov=es_wait --cov-report html:cov_html'

[tool.hatch.envs.lint]
detached = true
dependencies = [
  'black>=23.1.0',
  'mypy>=1.0.0',
  'ruff>=0.0.243',
]
[tool.hatch.envs.lint.scripts]
typing = 'mypy --install-types --non-interactive {args:src/es_wait tests}'
style = [
  'ruff {args:.}',
  'black --check --diff {args:.}',
]
fmt = [
  'black {args:.}',
  'ruff --fix {args:.}',
  'style',
]
all = [
  'style',
  'typing',
]

[tool.black]
target-version = ['py38']
line-length = 88
skip-string-normalization = true
include = '\.pyi?$'

[tool.ruff]
target-version = 'py38'
line-length = 120
select = [
  'A',
  'ARG',
  'B',
  'C',
  'DTZ',
  'E',
  'EM',
  'F',
  'FBT',
  'I',
  'ICN',
  'ISC',
  'N',
  'PLC',
  'PLE',
  'PLR',
  'PLW',
  'Q',
  'RUF',
  'S',
  'T',
  'TID',
  'UP',
  'W',
  'YTT',
]
ignore = [
  # Allow non-abstract empty methods in abstract base classes
  'B027',
  # Allow boolean positional values in function calls, like `dict.get(... True)`
  'FBT003',
  # Ignore checks for possible passwords
  'S105', 'S106', 'S107',
  # Ignore complexity
  'C901', 'PLR0911', 'PLR0912', 'PLR0913', 'PLR0915',
]
unfixable = [
  # Don't touch unused imports
  'F401',
]

[tool.ruff.isort]
known-first-party = ['es_wait']

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = 'all'

[tool.ruff.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
'tests/**/*' = ['PLR2004', 'S101', 'TID252']

[tool.coverage.run]
source_pkgs = ['es_wait', 'tests']
branch = true
parallel = true
omit = []

[tool.coverage.paths]
es_wait = ['src/es_wait', '*/es-wait/src/es_wait']
tests = ['tests', '*/es-wait/tests']

[tool.coverage.report]
exclude_lines = [
  'no cov',
  'if __name__ == .__main__.:',
  'if TYPE_CHECKING:',
]

[tool.hatch.build.targets.sdist]
exclude = [
    'cov_html',
    'dist',
    'docs',
    'docker_test',
    'examples',
    'html_docs',
    'mypy.ini',
    'pylintrc.toml',
    'pytest.ini',
    'tests',
]

[tool.hatch.envs.test]
dependencies = [
    'coverage[toml]',
    'mock',
    'requests',
    'pytest >=7.2.1',
    'pytest-cov',
    'es_client==8.13.4',
]

[publish.index.repos.main]
url = 'https://upload.pypi.org/legacy/'
username = '__token__'
